with Ada.Text_IO;           use Ada.Text_IO;

	--! Les Unbounded_String ont une capacité variable, contrairement au String
	--! pour lesquelles une capacité doit être fixée.
with ABR_HUFFMAN;

procedure test_module_abr is
    package ABR_String_Integer is
		new ABR_HUFFMAN (T_Cle => Integer, T_Donnee => Character, "<" => "<");
    use ABR_String_Integer;

    --on teste la fonction Est_Vide
    procedure test_Est_Vide is
        Abr     : T_ABR;
    begin
        initialiser(Abr);
        if Est_Vide(Abr) then
            Put_Line("ok");
        end if;
    end test_Est_Vide;

                ----------------------------------------------
    procedure test_Taille is
            Abr : T_ABR;

    begin
           initialiser(Abr);
           Enregistrer_Cle_Donnee(Abr,1,'a');
           Enregistrer_Cle_Donnee(Abr,2,'b');
           Enregistrer_Cle_Donnee(Abr,3,'c');
           pragma assert(Taille(Abr)=3);
           if Taille(Abr)=3 then
               Put_Line("ok");
           end if;
    end test_Taille;


                 ----------------------------------------------
    procedure test_Cle_Presente is
        Abr     : T_ABR;
    Begin
        initialiser(Abr);
        Enregistrer_Cle_Donnee(Abr,1,'a');
        Enregistrer_Cle_Donnee(Abr,2,'b');
        Enregistrer_Cle_Donnee(Abr,3,'c');
        if Cle_presente(Abr, 2) and not Cle_presente(Abr, 4) then
            Put_Line("ok");
        end if;
    end test_Cle_Presente;
    -------------------------------------

    procedure test_supprimer is
        Abr     : T_ABR;
    begin
        initialiser(Abr);
        Enregistrer_Cle_Donnee(Abr,1,'a');
        Enregistrer_Cle_Donnee(Abr,2,'b');
        Enregistrer_Cle_Donnee(Abr,3,'c');
		Supprimer(Abr,3);
		pragma Assert(not Cle_presente(Abr, 3));
        if not Cle_presente(Abr, 3) then
            Put_Line("ok");
        end if;
    end test_supprimer;
    --------------------------------------------------------
    procedure test_La_Donnee is
        Abr     : T_ABR;

    begin
        initialiser(Abr);
        Enregistrer_Cle_Donnee(Abr,1,'a');
		Enregistrer_Cle_Donnee(Abr,2,'b');
        Enregistrer_Cle_Donnee(Abr,3,'c');
		pragma assert(La_Donnee(Abr) = 'a' );
        if La_Donnee(Abr) = 'a' then
            Put_Line("ok");
       end if;
    end test_La_Donnee;

        ------------------------------------------------
    procedure test_Vider is
        Abr     : T_ABR;

    begin
        initialiser(Abr);
        Enregistrer_Cle_Donnee(Abr,1,'a');
        Enregistrer_Cle_Donnee(Abr,2,'b');
        Enregistrer_Cle_Donnee(Abr,3,'c');
        vider(Abr);
		pragma Assert(Est_Vide(Abr));
        if Est_Vide(Abr) then
            Put_Line("ok");
        end if;
    end test_Vider;
            -----------------------------------------------------
    procedure tester_est_feuille is
        Abr     : T_ABR;
		Sag           : T_ABR;
		Sad           : T_ABR;

    begin
        initialiser(Abr);
        Enregistrer_Cle_Donnee(Abr,1,'a');
        Enregistrer_Cle_Donnee(Abr,2,'b');
        Enregistrer_Cle_Donnee(Abr,0,'c');
		Sag := ABR_String_Integer.SAG(Abr);
		Sad := ABR_String_Integer.SAD(Abr);
        pragma assert( Est_Feuille(Sag) and Est_Feuille(Sad) and not Est_Feuille(Abr));
        if Est_Feuille(Sag) and Est_Feuille(Sad) and not Est_Feuille(Abr) then
             Put_Line("ok");
        end if;
    end tester_est_feuille;

    ---------------------------------------------
    procedure tester_SAG_SAD is
        Abr     : T_ABR;
		Sag           : T_ABR;
		Sad           : T_ABR;
    begin
        initialiser(Abr);
        Enregistrer_Cle_Donnee(Abr,2,'b');
        Enregistrer_Cle_Donnee(Abr,1,'a');
        Enregistrer_Cle_Donnee(Abr,3,'c');
		Sag := ABR_String_Integer.SAG(Abr);
		Sad := ABR_String_Integer.SAD(Abr);
        pragma assert( La_Donnee(Sag) = 'a' and La_Donnee(Sad) = 'c' );
        if La_Donnee(Sag) = 'a' and La_Donnee(Sad) = 'c' then
             Put_Line("ok");
        end if;
    end tester_SAG_SAD;

    -------------------------------------------------
    procedure test_Enregistrer_Cle is
        Abr     : T_ABR;

    begin
        initialiser(Abr);
        Enregistrer_Cle_Donnee(Abr,1,'a');
        Enregistrer_Cle_Donnee(Abr,2,'b');
        Enregistrer_Cle_Donnee(Abr,3,'c');
		pragma Assert(Cle_Presente(Abr,1));
		Enregistrer_Cle(Abr, 4);
        pragma Assert(Cle_Presente(Abr,4));
        if Cle_Presente(Abr,4) then
            Put_Line("ok");
        end if;
    end test_Enregistrer_Cle;

 begin
    test_Taille;
    test_Est_Vide;
    test_Cle_Presente;
    test_supprimer;
    test_La_Donnee;
    test_Vider;
    tester_est_feuille;
	test_Enregistrer_Cle;
	tester_SAG_SAD;

end test_module_abr;
