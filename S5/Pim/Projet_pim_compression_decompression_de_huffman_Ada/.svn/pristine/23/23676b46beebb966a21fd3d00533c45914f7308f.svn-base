
-- Définition de structures de données associatives sous forme d'un arbre
-- binaire de recherche (ABR).
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with LCA;
generic
	type T_Cle is private;
	type T_Donnee is private;
	with function "<" (Gauche, Droite : in T_Cle) return Boolean;

package ABR is

	Empty_Tree_Exception : exception;
	type T_ABR is private;
	type T_Bit is mod 2 ** 0; 
	type T_Octet is mod 2 ** 8; 
	
	package LCA_Char_String is
		new LCA (T_Cle => T_Donnee, T_Donnee => Unbounded_String);
    use LCA_Char_String;
       
      package LCA_Integer_String is
		new LCA (T_Cle => Integer, T_Donnee => T_Donnee);

	-- Initialiser une Sda.  La Sda est vide.
	procedure Initialiser(Sda: out T_ABR) with
		Post => Est_Vide (Sda);


	-- Est-ce qu'une Sda est vide ?
	function Est_Vide (Sda : T_ABR) return Boolean;


	-- Obtenir le nombre d'éléments d'une Sda. 
	function Taille (Sda : in T_ABR) return Integer with
		Post => Taille'Result >= 0
			and (Taille'Result = 0) = Est_Vide (Sda);
			
	-- Savoir si une Clé est présente dans une Sda.
	function Cle_Presente (Sda : in T_ABR ; Cle : in T_Cle) return Boolean;


	-- Enregistrer une Donnée associée à une Clé dans une Sda.
	-- Si la clé est déjà présente dans la Sda, sa donnée est changée.
	procedure Enregistrer_Cle_Donnee (Sda : in out T_ABR ; Cle : in T_Cle ; Donnee : in T_Donnee) with
		Post => (La_Donnee (Sda, Cle) = Donnee) 
		and (Taille (Sda) = Taille (Sda)'Old or Taille (Sda) = Taille (Sda)'Old + 1);
			
	-- Enregistrer le sous arbre gauche et le sous arbre droit.
	procedure Enregistrer_abrg_abrd (Sda : in out T_ABR ; Sag : in T_ABR ; Sad : in T_ABR) with
          Post => (Taille (Sda) = Taille (Sda)'Old + Taille(Sag) + Taille(Sad));
			
	procedure Enregistrer_Cle(Sda : in out T_ABR ; Cle : in T_Cle );
    
	-- Supprimer la Donnée associée à une Clé dans une Sda.
	-- Exception : Cle_Absente_Exception si Clé n'est pas utilisée dans la Sda
	procedure Supprimer (Sda : in out T_ABR ; Cle : in T_Cle) with
		Post =>  Taille (Sda) = Taille (Sda)'Old - 1; -- un élément de moins


	-- Obtenir la donnée associée à une Cle dans la Sda.
	-- Exception : Cle_Absente_Exception si Clé n'est pas utilisée dans l'Sda
	function La_Donnee (Sda : in T_ABR; Cle : T_Cle ) return T_Donnee;
	

	-- Supprimer tous les éléments d'une Sda.
	procedure Vider (Sda : in out T_ABR) with
		Post => Est_Vide (Sda);
		
	function Est_Feuille (Sda : in T_ABR) return Boolean;

	-- Appliquer un traitement (Traiter) pour chaque couple d'une Sda.
	-- Le parcours est infixe : on traite le sous-arbre gauche, puis le
	-- noeud, puis le sous-arbre droit.
	generic
		with procedure Traiter (Cle : in T_Cle; Donnee: in T_Donnee);
	procedure Pour_Chaque (Sda : in T_ABR; Suite : in out Unbounded_String);
	
	generic
		with procedure Traiter_Noeud(Cle : in T_Cle; Donnee : in T_Donnee);
	procedure Affichage_Huffman (Sda : in T_ABR ; Suite : in out Unbounded_String);
	
	function SAG (Sda : in T_ABR) return T_ABR;

	function SAD (Sda : in T_ABR) return T_ABR;
	
	procedure Code_Huffman(Sda : in T_ABR; Suite : in out Unbounded_String);
	
	procedure Table_Huffman (Sda : in T_ABR; lca : in out LCA_Char_String.T_LCA; Suite : in out Unbounded_String) ;
	
	procedure ReConsAbr(Sda : in out T_ABR; n : in out Integer; tab_Char : in LCA_Integer_String.T_LCA; Suite : in out Unbounded_String; Cle : in T_Cle ; Donnee : in T_Donnee);
	
	--procedure decodage(Sda : in T_ABR; S : in out Stream_Access; S1 : in out Stream_Access);


private

	
	type T_Noeud;
	type T_ABR is access T_Noeud;
	type T_Noeud is
		record
			Cle: T_Cle;
			Donnee : T_Donnee;
			Sous_Arbre_Gauche : T_ABR;
			Sous_Arbre_Droit : T_ABR;
			-- Invariant
			--    Pour tout noeud N dans Sous_Arbre_Gauche, N.Cle < Cle
			--    Pour tout noeud N dans Sous_Arbre_Droit,  N.Cle > Cle
		end record;

end ABR;
