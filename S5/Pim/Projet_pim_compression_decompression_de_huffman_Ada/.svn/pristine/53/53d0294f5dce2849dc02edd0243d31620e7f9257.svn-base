--with Ada.Text_IO;            use Ada.Text_IO;
with SDA_Exceptions;         use SDA_Exceptions;
with Ada.Unchecked_Deallocation;

package body LCA is

	procedure Free is
		new Ada.Unchecked_Deallocation (Object => T_Cellule, Name => T_LCA);


	procedure Initialiser(Sda: out T_LCA) is
	begin
		Sda := null;
	end Initialiser;


	function Est_Vide (Sda : T_LCA) return Boolean is
	begin
		return Sda = null;
	end;


	function Taille (Sda : in T_LCA) return Integer is
	begin
		if Sda = null then
			return 0;
		end if ;
		return 1+Taille(Sda.all.Next);
	end Taille;


	procedure Enregistrer (Sda : in out T_LCA ; Cle : in T_Cle ; Donnee : in T_Donnee) is
	begin
		if Sda = null then
			Sda := new T_Cellule'((Cle,Donnee),null);
		elsif Sda.all.Paire.Cle = Cle then
			Sda.all.Paire.Donnee := Donnee;
		else
			Enregistrer(Sda.all.Next, Cle, Donnee);
		end if ;

	end Enregistrer;

	procedure Enregistrer_Trie (Sda : in out T_LCA ; Cle : in T_Cle ; Donnee : in T_Donnee) is
		Sda_temp : T_LCA;
		prec : T_LCA;
		suiv : T_LCA;
	begin
		if Sda = null then
			Sda := new T_Cellule'((Cle,Donnee),null);
		elsif not min(Sda.all.Paire.Cle, Cle) then
			Sda_temp := new T_Cellule'((Cle,Donnee),Sda);
			Sda := Sda_temp;
		else
			prec := null;
			suiv := Sda;
			while (suiv /= null) and then min(suiv.all.Paire.Cle,Cle)loop
				prec := suiv;
				suiv := suiv.all.Next;
			end loop;
			prec.all.Next := new T_Cellule'((Cle,Donnee),suiv);

		end if ;

	end Enregistrer_Trie;


	function Cle_Presente (Sda : in T_LCA ; Cle : in T_Cle) return Boolean is
	begin
		if Sda = null then
			return False;
		elsif Sda.all.Paire.Cle = Cle then
			return True;
		else
			return Cle_Presente(Sda.all.Next, Cle);
		end if;
	end;


	function La_Donnee (Sda : in T_LCA ; Cle : in T_Cle) return T_Donnee is
	begin
		if Sda = null then
			raise Cle_Absente_Exception;
		elsif Sda.all.Paire.Cle = Cle then
			return Sda.all.Paire.Donnee;
		else
			return La_Donnee(Sda.all.Next, Cle);
		end if;
	end La_Donnee;

	function La_Paire (Sda : in T_LCA ) return T_CD is
	begin
		return Sda.all.Paire;
	end La_Paire;

	function La_Cell_Next (Sda : in T_LCA) return T_LCA is
	begin
		return Sda.all.Next;
	end La_Cell_Next;



	procedure Supprimer (Sda : in out T_LCA ; Cle : in T_Cle) is
		Sda_temp : T_LCA;
	begin
		if Sda = null then
			raise Cle_Absente_Exception;
		else
			if Sda.all.Paire.Cle = Cle then
				Sda_temp := Sda;
				Sda := Sda.all.Next;
				free(Sda_temp);
			else
				Supprimer(sda.all.Next, Cle);
			end if;
		end if;

	end Supprimer;


	procedure Vider (Sda : in out T_LCA) is
	begin
		if Sda /= null then
			Vider(Sda.all.next);
			Free(Sda);
		end if;
	end Vider;


	procedure Pour_Chaque (Sda : in T_LCA) is
	begin
		if Sda = null then
			Null;
		else
			Traiter(Sda.all.Paire.Cle, Sda.all.Paire.Donnee);
			Pour_Chaque(Sda.all.next);
		end if;

		--exception
			--when others => Pour_Chaque(Sda.all.next);
	end Pour_Chaque;

	function Extraire_Min (Sda : in out T_LCA) return T_CD is
		emptyList_Exception : exception ;
		Paire_Temp : T_CD;
	begin
		if Sda = null then
			raise emptyList_Exception;
		else
			Paire_Temp := Sda.all.Paire;
			Supprimer(Sda, Sda.all.Paire.Cle);
			return Paire_Temp;
		end if;
	end Extraire_Min;
end LCA;
