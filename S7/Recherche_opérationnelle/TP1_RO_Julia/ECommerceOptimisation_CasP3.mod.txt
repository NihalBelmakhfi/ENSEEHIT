#  GLPK model pile created by SUN for RO teaching


###############################  Model ###############################


###############################  Sets  ###############################

set DEMANDES; #d

set PRODUITS; #p

set MAGASINS; #m

################### Variables ###################

var ReponseDemande{d in DEMANDES, p in PRODUITS, m in MAGASINS}, >=0, integer;

var Expedie{m in MAGASINS, d in DEMANDES}, binary;

###################  Constants: Data to load   #########################

param Demandes{d in DEMANDES, p in PRODUITS};
param Stocks{m in MAGASINS, p in PRODUITS};
param CoutUnitaire{m in MAGASINS, p in PRODUITS};
param CoutExpeditionFixe{m in MAGASINS, d in DEMANDES};
param CoutExpeditionVariable{m in MAGASINS, d in DEMANDES};

################### Constraints ###################

s.t. DemandeRespectee {d in DEMANDES, p in PRODUITS}:
    sum{m in MAGASINS} ReponseDemande[d,p,m] = Demandes[d,p];

s.t. StockLimite {m in MAGASINS, p in PRODUITS}:
    sum{d in DEMANDES} ReponseDemande[d,p,m] <= Stocks[m,p];

s.t. Expedition {m in MAGASINS, d in DEMANDES}:
    sum{p in PRODUITS} Expedie[m,d] * Stocks[m,p]>= sum{p in PRODUITS} ReponseDemande[d,p,m];


###### Objective ######

minimize CoutLivraison:
  (sum{d in DEMANDES} sum{p in PRODUITS} sum {m in MAGASINS} ReponseDemande[d,p,m] * (CoutUnitaire[m,p] + CoutExpeditionVariable[m,d]))
  + (sum{m in MAGASINS} sum{d in DEMANDES} CoutExpeditionFixe[m,d] * Expedie[m,d]);


end;
